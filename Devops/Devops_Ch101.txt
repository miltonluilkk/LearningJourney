Devops - collection of 2 words - development and operations
help learn DevOps basics and advanced concepts, including Git, Ansible, Docker, Puppet, Jenkins, a range of DevOps tools, Azure DevOps, Chef, Nagios, and Kubernetes.
 

 Definition: DevOps is a software development approach focused on collaboration, automation, and continuous delivery to deliver high-quality products quickly and efficiently.

Core Objective: Breaks down silos between development and operations teams to enable seamless communication, faster time-to-market, and improved customer satisfaction.
Application Lifecycle Management: Covers the entire lifecycle, including development, testing, operations, and deployment.
Collaboration: Encourages cooperation between Development and Operations teams to deploy code to production rapidly in an automated and repeatable manner.
Automation: Heavily automates every phase of the software development lifecycle (planning, coding, testing, deployment, monitoring) to improve productivity, ensure consistency, and reduce errors.
Continuous Improvement: Promotes a culture of continuous improvement by incorporating feedback loops for faster iteration and better decision-making.
Benefits: Increases organizational agility, reduces costs, and accelerates innovation.

A DevOps Engineer combines software development and IT operations to improve how software is built and deployed. This role involves creating and managing systems that help teams work together more efficiently, ensuring that updates and new features are released quickly and reliably.

Responsibilities
Build and Maintain Tools: Create and manage tools that automate software development and deployment processes.
Collaborate with Teams: Work closely with software developers and IT staff to ensure smooth and fast delivery of applications.
Monitor Systems: Keep an eye on system performance and fix any issues that arise to ensure everything runs smoothly.
Improve Processes: Continuously look for ways to make the software development and deployment processes more efficient.
Ensure Security: Implement practices to keep systems secure from potential threats.

===================================================================================================================

1. Download the virtual box 

2. Install CentOS (This is just recommendations)

2.1 during the installation, it could be hitting the issue of the VT-X not enabled- then it has to go back to BIOS setting to enable back

===================================================================================================================

DevOps Model Defined
DevOps is a software development approach that emphasizes collaboration and communication between development (Dev) and operations (Ops) teams. 
It aims to shorten the software development lifecycle and improve the quality and reliability of software releases.

Delivery Pipeline
The pipeline represents the different stages that software goes through before it is released to production. These stages might typically include:

Build Stage
Developers write and organize code, using version control tools like Git to track changes.
The system automatically compiles and packages the code into a deployable format.
Dependencies (external libraries and tools) are included to ensure smooth operation.
Common Tools: Git, Jenkins, GitLab CI/CD, Gradle, Maven.

Test Stage
The software undergoes thorough testing to catch bugs and security risks before release.
Different testing methods include:
Unit Testing: Checks individual pieces of code.
Integration Testing: Ensures different parts of the system work together.
Performance Testing: Measures speed and scalability.
Security Testing: Identifies potential vulnerabilities.
Automated tests help ensure the software is stable before moving forward.
Common Tools: Selenium, JUnit, TestNG, SonarQube.

Release Stage

The software is deployed in a staging environment to simulate real-world conditions.
If everything checks out, the software is rolled out to production using deployment strategies like:
Blue-Green Deployment: Two identical environments switch traffic for a seamless update.
Canary Deployment: A small percentage of users get the new version first, ensuring safety.
Rolling Updates: The update is gradually pushed out to all users.
Common Tools: Docker, Kubernetes, Ansible, Helm, ArgoCD.

Continuous Feedback Loop
A key aspect of DevOps is learning from real-world performance and using that feedback to improve future releases.

Monitoring & Logging: Track system performance and detect errors.
User Feedback: Gather insights from customers to enhance features.
Incident Response: Alert systems notify teams of failures for quick fixes.
Process Improvement: Teams analyze past releases to optimize automation and workflow.
Common Tools: Prometheus, Grafana, ELK Stack, Datadog, New Relic.

How DevOps Works?
DevOps brings development and operations teams together, eliminating traditional barriers between them. Instead of working in isolation, 
both teams collaborate throughout the entire software lifecycle—from coding and testing to deployment and maintenance.

1. Collaboration Across Teams
Developers and operations teams work side by side instead of handling tasks separately.
Security and quality assurance (QA) teams are also involved early in the process to prevent last-minute issues.
This close coordination ensures faster development, fewer errors, and smoother releases.
When security is integrated at every stage, it’s called DevSecOps, ensuring that applications are built with security in mind from the start.

2. Automating Repetitive Tasks
DevOps focuses on automating tasks like testing, deployments, and infrastructure setup.
CI/CD pipelines (Continuous Integration & Continuous Deployment) help release updates quickly and reliably.
Engineers can deploy code or set up servers independently, reducing delays.
Automation not only speeds up development but also minimizes human errors and makes processes more efficient.

3. Using the Right Tools
DevOps teams rely on tools to manage code, testing, deployments, and monitoring, making workflows more efficient. Some key tools include:

Version Control – Git, GitHub, GitLab
CI/CD Automation – Jenkins, GitLab CI/CD
Infrastructure as Code – Terraform, Ansible
Monitoring & Logging – Prometheus, Grafana, ELK Stack

 DevOps follows positive techniques that consist of code, building, testing, releasing, deploying, operating, displaying, and planning.
 DevOps lifecycle follows a range of phases such as non-stop development, non-stop integration, non-stop testing, non-stop monitoring, and non-stop feedback.

7 Cs of DevOps 
Continuous Development
Continuous Integration
Continuous Testing
Continuous Deployment/Continuous Delivery
Continuous Monitoring
Continuous Feedback
Continuous Operations

Core DevOps Practices
1. Continuous Integration (CI)
CI ensures that code changes are frequently merged and tested, catching bugs early.
Popular Tools: Jenkins, GitHub Actions, GitLab CI/CD.
2. Continuous Delivery (CD)
With CD, every successful build is automatically deployed to a test or production environment, making software releases smoother.
Popular Tools: ArgoCD, AWS CodeDeploy, GitLab CI/CD.
3. Infrastructure as Code (IaC)
IaC allows teams to define and manage infrastructure through code, ensuring consistency and reducing manual errors.
Popular Tools: Terraform, CloudFormation, Ansible.
4. Containerization & Orchestration
Containers package applications and dependencies together, while orchestration tools manage scaling and deployment.
Popular Tools: Docker, Kubernetes, Helm.
5. Monitoring & Logging
Monitoring and logging help teams track system health, identify issues, and prevent failures before they impact users.
Popular Tools: Prometheus, ELK Stack, Datadog.
6. Security & DevSecOps
Security is integrated into every stage of development, ensuring vulnerabilities are identified and fixed early.
Popular Tools: SonarQube, Trivy, Open Policy Agent.
7. Site Reliability Engineering (SRE)
SRE focuses on system stability, automated recovery, and performance optimization to ensure high uptime.
Popular Tools: Chaos Monkey, PagerDuty.

10 Best DevOps Tools
1. Jenkins
Purpose: Continuous Integration and Continuous Delivery (CI/CD)
Features: Extensive plugin ecosystem, automation of build and deployment processes, and scalability.
2. Docker
Purpose: Containerization
Features: Simplifies application deployment, ensures consistency across environments, and supports microservices architecture.
3. Kubernetes
Purpose: Container Orchestration
Features: Automates deployment, scaling, and management of containerized applications.
4. Terraform
Purpose: Infrastructure as Code (IaC)
Features: Manages infrastructure across multiple cloud providers, ensures reproducibility, and supports version control.
5. Ansible
Purpose: Configuration Management and Automation
Features: Simple syntax (YAML), agentless architecture, and scalability.
6. Prometheus
Purpose: Monitoring and Alerting
Features: Collects and stores metrics, powerful querying language (PromQL), and integration with Grafana for visualization.
7. GitLab
Purpose: Source Code Management and CI/CD
Features: Integrated DevOps platform, supports code versioning, CI/CD pipelines, and project management tools.
8. ELK Stack (Elasticsearch, Logstash, Kibana)
Purpose: Logging and Analytics
Features: Real-time data search and analysis, log aggregation, and powerful visualization capabilities.
9. Azure DevOps
Purpose: End-to-End DevOps Solution
Features: Supports CI/CD, project management, and integrates with various development and monitoring tools.
10. Nagios
Purpose: Infrastructure Monitoring
Features: Monitors network services, server resources, and provides alerts for potential issues.



