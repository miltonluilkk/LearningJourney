Two-Pointer Technique

What is the Two-Pointer Technique?
The two-pointer technique is a common strategy used to solve problems involving arrays, strings, or linked lists.
It involves using two pointers (indices) to traverse the data structure from different directions or at different speeds.

The Two Pointers Technique is a common strategy used to solve problems involving arrays, strings, or linked lists. 
It involves using two pointers (indices or references) to traverse the data structure efficiently, often in linear time (O(n)).

** traverse the data structures ** this is key

When to Use It:
###Problems involving pairs (e.g., finding two numbers that add up to a target).
###Problems requiring in-place modifications (e.g., reversing an array).
###Problems involving subarrays or substrings (e.g., finding the longest substring without repeating characters).

When to Use the Two Pointers Technique?
This technique is useful for:
Searching for pairs in a sorted array (e.g., two-sum problem).
Removing duplicates from a sorted array.
Reversing an array or string.
Detecting cycles in linked lists.
Sliding window problems (a variant of two pointers).

How It Works
The two-pointer technique can be implemented in two main ways:

a. Opposite Direction (Left and Right Pointers)
##One pointer starts at the beginning (left) and moves forward.
##The other pointer starts at the end (right) and moves backward.
##This is commonly used for problems like reversing an array or finding pairs.

b. Same Direction (Slow and Fast Pointers)
##Both pointers start at the beginning.
##One pointer moves faster than the other.
##This is commonly used for problems like detecting cycles in linked lists or removing duplicates.

moving : 
Towards each other (one from the start, one from the end).
In the same direction (both starting from the beginning).
At different speeds (e.g., slow and fast pointers).
===========================================

1. Opposite Direction Pointers
One pointer starts at the beginning, and the other starts at the end.

They move towards each other until they meet or cross.

Commonly used for sorted arrays or palindrome problems.

def twoSum(numbers, target):
    left, right = 0, len(numbers) - 1
    while left < right:
        current_sum = numbers[left] + numbers[right]
        if current_sum == target:
            return [left + 1, right + 1]  # 1-based indexing
        elif current_sum < target:
            left += 1
        else:
            right -= 1
    return []

2. Same Direction Pointers
Both pointers start at the beginning.

One pointer (slow) tracks the position for the next valid element, and the other (fast) scans the array.

Commonly used for removing duplicates or in-place modifications.

def removeDuplicates(nums):
    if not nums:
        return 0
    slow = 0
    for fast in range(1, len(nums)):
        if nums[fast] != nums[slow]:
            slow += 1
            nums[slow] = nums[fast]
    return slow + 1

3. Fast and Slow Pointers
One pointer moves faster than the other.

Commonly used for cycle detection in linked lists or finding the middle of a list.

Example Problem: Detect Cycle in a Linked List
Given a linked list, determine if it has a cycle.

def hasCycle(head):
    slow, fast = head, head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False

Related Concepts
1. Sliding Window
A variant of the two pointers technique where the window size can be fixed or variable.

Used for problems involving subarrays or substrings.

Example Problem: Maximum Sum Subarray of Size K
Given an array, find the maximum sum of any subarray of size k.

def maxSumSubarray(nums, k):
    window_sum = sum(nums[:k])
    max_sum = window_sum
    for i in range(k, len(nums)):
        window_sum += nums[i] - nums[i - k]
        max_sum = max(max_sum, window_sum)
    return max_sum
	
	
2. Prefix Sum
A technique to precompute cumulative sums to solve range-based queries efficiently.

Often combined with two pointers.

Example Problem: Subarray Sum Equals K
Given an array, find the total number of subarrays that sum to k.


def subarraySum(nums, k):
    prefix_sum = {0: 1}
    current_sum = 0
    count = 0
    for num in nums:
        current_sum += num
        if current_sum - k in prefix_sum:
            count += prefix_sum[current_sum - k]
        prefix_sum[current_sum] = prefix_sum.get(current_sum, 0) + 1
    return count
===============================================
Problems to check :
1. reverse string  (this is to use the 2 pointer to transform string)
