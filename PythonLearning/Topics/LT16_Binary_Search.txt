1. DEFINITIONS
----------------
- Binary Search: 
  Binary Search is an efficient algorithm for finding an item from a sorted list of items. 
  It works by repeatedly dividing the search interval in half. If the value of the search key 
  is less than the item in the middle of the interval, narrow the interval to the lower half. 
  Otherwise, narrow it to the upper half. Repeatedly check until the value is found or the 
  interval is empty.

2. USAGES
---------
- Binary Search is used to quickly find the position of a target value within a sorted array.
- It is significantly faster than linear search, especially for large datasets, as it reduces 
  the search space by half with each comparison.

3. COMMON EXAMPLES
------------------
Example 1: Basic Binary Search in Python

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1  # Target not found

# Usage:
arr = [1, 3, 5, 7, 9, 11]
target = 7
result = binary_search(arr, target)
print(f"Element found at index: {result}")  # Output: Element found at index: 3

Example 2: Binary Search using Recursion

def binary_search_recursive(arr, target, left, right):
    if left > right:
        return -1
    mid = (left + right) // 2
    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search_recursive(arr, target, mid + 1, right)
    else:
        return binary_search_recursive(arr, target, left, mid - 1)

# Usage:
arr = [1, 3, 5, 7, 9, 11]
target = 5
result = binary_search_recursive(arr, target, 0, len(arr) - 1)
print(f"Element found at index: {result}")  # Output: Element found at index: 2

4. FEATURES
-----------
- Efficiency: Binary Search operates in O(log n) time complexity, making it highly efficient 
  for large datasets.
- Precondition: The list must be sorted for Binary Search to work correctly.
- Space Complexity: O(1) for iterative implementation, O(log n) for recursive due to call stack.

5. APPLICATIONS
---------------
- Searching in Databases: Efficiently locating records in a sorted database.
- Number Guessing Games: Quickly narrowing down the possible range of numbers.
- Debugging: Finding the exact point where a bug occurs in a sorted log file.
- Algorithm Design: Used as a building block in more complex algorithms like divide and conquer.

6. CONCEPT CLEANING QUESTIONS AND ANSWERS
-----------------------------------------
Q1: Why is Binary Search more efficient than Linear Search?
A1: Binary Search reduces the search space by half with each comparison, leading to a time 
    complexity of O(log n), whereas Linear Search has a time complexity of O(n).

Q2: Can Binary Search be applied to unsorted lists?
A2: No, Binary Search requires the list to be sorted. Applying it to an unsorted list will 
    yield incorrect results.

Q3: What happens if the target element is not present in the list?
A3: If the target element is not found, Binary Search will return -1 or any other indicator 
    of absence, depending on the implementation.

Q4: Is Binary Search suitable for linked lists?
A4: No, Binary Search is not suitable for linked lists because accessing the middle element 
    in a linked list is not efficient.

7. FURTHER DETAILS THAT YOU NEED TO KNOW
----------------------------------------
- Edge Cases: Always consider edge cases such as an empty list, a list with one element, or 
  a target element that is the first or last in the list.
- Variations: There are variations of Binary Search like finding the first or last occurrence 
  of a target element, or finding the insertion point for a target element in a sorted list.
- Libraries: Python's `bisect` module provides functions to perform Binary Search and insert 
  elements in a sorted list.

Example using `bisect` module:

import bisect

arr = [1, 3, 5, 7, 9, 11]
target = 7
index = bisect.bisect_left(arr, target)
if index != len(arr) and arr[index] == target:
    print(f"Element found at index: {index}")  # Output: Element found at index: 3
else:
    print("Element not found")

- Optimization: Ensure that the list is sorted before applying Binary Search. Sorting the list 
  beforehand can be costly, but if the list is already sorted, Binary Search is optimal.
