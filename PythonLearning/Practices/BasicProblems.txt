1. n -> true for even , false for odd

if n % 2 ==0:
	true
else:
	false
	
2. sum of the first n natural numbers
3 -> 1 + 2 + 3= 6

def SumNat(n):
    Ssum = 0
    for i in range(1,n+1):
        Ssum += i 
    return(Ssum)


c = SumNat(3)
print(c)

while loop :

    sum = 0
    x = 1
    while x <= n:
        sum = sum + x
        x = x + 1
    return sum
	
formula : Sum of first n natural numbers = (n * (n+1)) / 2


4 --> swap values 

using thire values

a = 20
b = 10
c = a 
a = b
b = c

    a = a + b
    b = a - b
    a = a - b

a ,b = b , a (python approach) 

5. --> Given two integers n and m (m != 0). Find the number closest to n and divisible by m. If there is more than one such number, then output the one having maximum absolute value.
The basic idea is to start checking from n – m to n + m one by one and tack the closest number.


Input: n = 13, m = 4
Output: 12
Explanation: 12 is the closest to 13, divisible by 4.


Input: n = -15, m = 6
Output: -18
Explanation: Both -12 and -18 are closest to -15, but-18 has the maximum absolute value.



[Expected Approach] By finding Quotient

We find the value of n/m. Then we find closest of two possibilities. One is q * m other is (m * (q + 1)) or (m * (q – 1)) depending on whether one of the given two numbers is negative or not.

Q = int(-15/6)



# Python 3 implementation to find
# the number closest to n

def closestNumber(n, m) :
    # Find the quotient
    q = int(n / m)
    
    # 1st possible closest number
    n1 = m * q
    
    # 2nd possible closest number
    if((n * m) > 0) :
        n2 = (m * (q + 1)) 
    else :
        n2 = (m * (q - 1))
    
    # if true, then n1 is the required closest number
    if (abs(n - n1) < abs(n - n2)) :
        return n1
    
    # else n2 is the required closest number 
    return n2
    
    
if __name__ == "__main__":
  n = 13; m = 4
  print(closestNumber(n, m))
  
  
7--> dice ,
the opposite side number :

def oppositeFaceOfDice(n):
    
    # Stores number on opposite face
    # of dice
    ans = 7 - n
    return ans
  
  
  Input : a1 = 2,  a2 = 3,  n = 4
Output : 5
Explanation : The series is 2, 3, 4, 5, 6, ....   , thus the 5th term is 5. 

Input : a1 = 1, a2 = 3, n = 10
Output : 19
Explanation:  The series is: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21..... Thus,10th term is 19.


[Naive Approach] - Using for Loop

'
We know the Arithmetic Progression series is like =  2, 3, 4, 5, 6. …. … 
In this series 2 is the first term and 5 is the second term of the series . 
Common difference = a2 - a1 =  3 – 2 = 1 (Difference common in the series). 
so we can write the series as :
t1 = a1 
t2 = a1 + (2-1) * d 
t3 = a1 + (3-1) * d 
. 
. 
. 
tN = a1 + (n-1) * d 

tN = a1 + (n-1) * (a2-a1) .




def nthTermOfAP(a1, a2, n):
    # using formula to find the
    # Nth term t(n) = a(1) + (n-1)*d
    return a1 + (n - 1) * (a2 - a1)


a1 = 2
a2 = 3
n = 4
print(nthTermOfAP(a1, a2, n))

-------------------------------
s = '687' 

The logic is to divide the last one to 10 
n%10, then it will be left as 7 , then it will be the single digit... and adding up for these

def sumOfDigits(n):
    sum = 0
    while n != 0:

        # Extract the last digit
        last = n % 10

        # Add last digit to sum
        sum += last

        # Remove the last digit
        n //= 10
    return sum
	
similiar logic to reverse the digits ...


n = 4562
rev = 0

while(n > 0):
    a = n % 10
    rev = rev * 10 + a
    n = n // 10

Given a positive integer, check if the number is prime or not. 
A prime is a natural number greater than 1 that has no positive 
divisors other than 1 and itself. Examples of the first few prime numbers are {2, 3, 5, …}

how to find a prime number 

for loop , n or sqrt n 

Given two positive numbers x and y, check if y is a power of x or not.


Summary Table
Method	Example 3.7	Example -3.7	Behavior
int(x)	3	-3	Truncate toward zero
math.floor(x)	3	-4	Round down (toward -∞)
math.ceil(x)	4	-3	Round up (toward +∞)
round(x)	4	-4	Round to nearest (ties to even)
x // 1	3	-4	Same as floor(x)

Given two positive numbers x and y, check if y is a power of x or not.

Input:  x = 10, y = 1
Output: True
x^0 = 1


Input:  x = 10, y = 1000
Output: True
x^3 = 1


Input:  x = 10, y = 1001
Output: False



def isPower(x, y):
    # The only power of 1 is 1 itself
    if x == 1:
        return y == 1

    # Repeatedly compute power of x
    pow = 1
    while pow < y:
        pow *= x

    # Check if power of x becomes y
    return pow == y


Calculate the distance between two points.
Input : x1, y1 = (3, 4)
           x2, y2 = (7, 7)
Output : 5

Input : x1, y1 = (3, 4) 
           x2, y2 = (4, 3)
Output : 1.41421




# Python3 program to calculate 
# distance between two points

import math

# Function to calculate distance
def distance(x1 , y1 , x2 , y2):
    return math.sqrt(math.pow(x2 - x1, 2) +
                math.pow(y2 - y1, 2))

# Drivers Code
print("%.6f"%distance(3, 4, 4, 3))

Factorial of a Number
# Python 3 program to find
# factorial of given number
def factorial(n):

    res = 1

    for i in range(2, n + 1):
        res *= i
    return res


# Driver Code
num = 5
print("Factorial of", num, "is", factorial(num))

Given a positive integer n, find its square root. If n is not a perfect square, then return floor of √n.











