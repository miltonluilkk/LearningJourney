1. n -> true for even , false for odd

if n % 2 ==0:
	true
else:
	false
	
2. sum of the first n natural numbers
3 -> 1 + 2 + 3= 6

def SumNat(n):
    Ssum = 0
    for i in range(1,n+1):
        Ssum += i 
    return(Ssum)


c = SumNat(3)
print(c)

while loop :

    sum = 0
    x = 1
    while x <= n:
        sum = sum + x
        x = x + 1
    return sum
	
formula : Sum of first n natural numbers = (n * (n+1)) / 2


4 --> swap values 

using thire values

a = 20
b = 10
c = a 
a = b
b = c

    a = a + b
    b = a - b
    a = a - b

a ,b = b , a (python approach) 

5. --> Given two integers n and m (m != 0). Find the number closest to n and divisible by m. If there is more than one such number, then output the one having maximum absolute value.
The basic idea is to start checking from n – m to n + m one by one and tack the closest number.


Input: n = 13, m = 4
Output: 12
Explanation: 12 is the closest to 13, divisible by 4.


Input: n = -15, m = 6
Output: -18
Explanation: Both -12 and -18 are closest to -15, but-18 has the maximum absolute value.



[Expected Approach] By finding Quotient

We find the value of n/m. Then we find closest of two possibilities. One is q * m other is (m * (q + 1)) or (m * (q – 1)) depending on whether one of the given two numbers is negative or not.

Q = int(-15/6)



# Python 3 implementation to find
# the number closest to n

def closestNumber(n, m) :
    # Find the quotient
    q = int(n / m)
    
    # 1st possible closest number
    n1 = m * q
    
    # 2nd possible closest number
    if((n * m) > 0) :
        n2 = (m * (q + 1)) 
    else :
        n2 = (m * (q - 1))
    
    # if true, then n1 is the required closest number
    if (abs(n - n1) < abs(n - n2)) :
        return n1
    
    # else n2 is the required closest number 
    return n2
    
    
if __name__ == "__main__":
  n = 13; m = 4
  print(closestNumber(n, m))
  
  
7--> dice ,
the opposite side number :

def oppositeFaceOfDice(n):
    
    # Stores number on opposite face
    # of dice
    ans = 7 - n
    return ans
  
  
  Input : a1 = 2,  a2 = 3,  n = 4
Output : 5
Explanation : The series is 2, 3, 4, 5, 6, ....   , thus the 5th term is 5. 

Input : a1 = 1, a2 = 3, n = 10
Output : 19
Explanation:  The series is: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21..... Thus,10th term is 19.


[Naive Approach] - Using for Loop

'
We know the Arithmetic Progression series is like =  2, 3, 4, 5, 6. …. … 
In this series 2 is the first term and 5 is the second term of the series . 
Common difference = a2 - a1 =  3 – 2 = 1 (Difference common in the series). 
so we can write the series as :
t1 = a1 
t2 = a1 + (2-1) * d 
t3 = a1 + (3-1) * d 
. 
. 
. 
tN = a1 + (n-1) * d 

tN = a1 + (n-1) * (a2-a1) .




def nthTermOfAP(a1, a2, n):
    # using formula to find the
    # Nth term t(n) = a(1) + (n-1)*d
    return a1 + (n - 1) * (a2 - a1)


a1 = 2
a2 = 3
n = 4
print(nthTermOfAP(a1, a2, n))
