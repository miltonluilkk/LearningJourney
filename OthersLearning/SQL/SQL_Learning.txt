1. Foundational SQL Concepts
These are the basics you must be comfortable with:

a. SQL Syntax and Queries
SELECT statements: Retrieving data from tables.
WHERE clause: Filtering data based on conditions.
ORDER BY: Sorting results.
LIMIT/OFFSET: Limiting the number of rows returned.
DISTINCT: Selecting unique values.

b. Joins
INNER JOIN: Combining rows from two or more tables based on a related column.
LEFT/RIGHT JOIN: Including all rows from one table and matching rows from another.
FULL OUTER JOIN: Combining all rows from both tables.
Self-Join: Joining a table to itself.

c. Aggregations
GROUP BY: Grouping rows that have the same values.
HAVING: Filtering groups based on conditions.
Aggregate functions: COUNT(), SUM(), AVG(), MIN(), MAX().

d. Data Manipulation
INSERT: Adding new rows to a table.
UPDATE: Modifying existing rows.
DELETE: Removing rows from a table.

e. Data Definition
CREATE TABLE: Creating new tables.
ALTER TABLE: Modifying table structure.
DROP TABLE: Deleting tables.

f. Constraints
PRIMARY KEY: Uniquely identifying each row.
FOREIGN KEY: Enforcing relationships between tables.
UNIQUE: Ensuring all values in a column are unique.
NOT NULL: Ensuring a column cannot have NULL values.
CHECK: Ensuring values meet specific conditions.

2. Intermediate SQL Concepts
These are more advanced topics that are often tested in interviews:

a. Subqueries
Writing nested queries to solve complex problems.
Using subqueries in SELECT, FROM, and WHERE clauses.

b. Window Functions
ROW_NUMBER(): Assigning a unique number to each row.
RANK(): Assigning a rank to rows within a partition.
DENSE_RANK(): Similar to RANK(), but without gaps.
LEAD()/LAG(): Accessing data from subsequent or previous rows.

c. Common Table Expressions (CTEs)
Using WITH clauses to create temporary result sets for complex queries.

d. Set Operations
UNION: Combining results from multiple queries.
INTERSECT: Finding common rows between queries.
EXCEPT: Finding rows in one query but not in another.

e. Indexes
Understanding how indexes work and when to use them.
Types of indexes: Clustered vs. Non-Clustered.

3. Advanced SQL Concepts
These are highly relevant for hedge fund roles, as they deal with large datasets and complex queries:

a. Performance Optimization
Writing efficient queries.
Understanding query execution plans.
Avoiding common pitfalls like SELECT * and unnecessary joins.

b. Transactions
ACID properties: Atomicity, Consistency, Isolation, Durability.
BEGIN TRANSACTION, COMMIT, ROLLBACK.

c. Stored Procedures and Functions
Writing reusable SQL code.

Understanding the difference between procedures and functions.

d. Handling Financial Data
Working with time-series data (e.g., stock prices, trades).
Calculating moving averages, returns, and volatility.
Handling NULL values and missing data.

e. Data Import/Export
Loading data from CSV files or other sources.

Exporting query results to files.

4. Practical Applications for Hedge Funds
Since you’re interviewing for a hedge fund app support role, you should be familiar with SQL applications in finance:

a. Portfolio Analysis
Calculating portfolio returns, risk metrics, and performance attribution.

Aggregating positions and transactions.

b. Trade Data
Querying trade execution data.

Analyzing slippage, fill rates, and transaction costs.

c. Market Data
Querying and analyzing stock prices, indices, and other market data.

Handling OHLC (Open, High, Low, Close) data.

d. Risk Management
Querying exposure data.

Calculating Value-at-Risk (VaR) and other risk metrics.

e. Reporting
Generating reports for traders, portfolio managers, and risk teams.

Using SQL to create summary tables and dashboards.

5. Practice Problems
To solidify your knowledge, practice the following types of problems:

Basic Queries

Retrieve all trades for a specific stock.

Find the top 5 performing stocks by return.

Joins

Combine trade data with market data to calculate execution prices.

Join portfolio holdings with security master data.

Aggregations

Calculate the average daily volume for a stock.

Find the total P&L for a portfolio.

Window Functions

Calculate a 30-day moving average for a stock price.

Rank stocks by their daily returns.

Subqueries and CTEs

Find stocks that outperformed the market index.

Calculate cumulative returns for a portfolio.

Optimization

Rewrite a slow query to improve performance.

Analyze an execution plan and identify bottlenecks.

6. Tools and Platforms
SQL Databases: MySQL, PostgreSQL, SQL Server, Oracle.

Financial Databases: Bloomberg Terminal, FactSet, Refinitiv (if applicable).

Practice Platforms: LeetCode, HackerRank, SQLZoo, Mode Analytics.

7. Interview Tips
Understand the Role: Hedge fund app support often involves troubleshooting, data analysis, and working with traders. Be prepared to explain how SQL fits into these tasks.

Practice Real-World Scenarios: Be ready to write queries on the spot or optimize existing ones.

Explain Your Thought Process: Interviewers value clear communication and problem-solving skills.

Brush Up on Finance Basics: Understand terms like P&L, NAV, VaR, and portfolio construction.

By mastering these concepts and practicing real-world problems, you’ll be well-prepared for your SQL interview in a hedge fund app support role. Let me know if you’d like further clarification or practice problems!


Hard Cross-Table Questions with Joins, Calculations, and Window Functions
1. Find Employees Who Earn More Than Their Managers (Self-Join)
Tables:

employees: id, name, salary, manager_id

Question: Write a query to find employees who earn more than their managers.

Answer:

sql
复制
SELECT e.name AS employee_name, e.salary AS employee_salary, m.name AS manager_name, m.salary AS manager_salary
FROM employees e
INNER JOIN employees m ON e.manager_id = m.id
WHERE e.salary > m.salary;
2. Find Departments with the Highest Average Salary (Aggregation + Window Function)
Tables:

employees: id, name, salary, department_id

departments: id, name

Question: Write a query to find the department(s) with the highest average salary.

Answer:

sql
复制
WITH department_avg_salary AS (
    SELECT d.name AS department_name, AVG(e.salary) AS avg_salary
    FROM employees e
    INNER JOIN departments d ON e.department_id = d.id
    GROUP BY d.name
)
SELECT department_name, avg_salary
FROM department_avg_salary
WHERE avg_salary = (SELECT MAX(avg_salary) FROM department_avg_salary);
3. Find Customers Who Placed Orders in All Categories (Cross-Table + Subquery)
Tables:

customers: id, name

orders: id, customer_id, category_id

categories: id, name

Question: Write a query to find customers who have placed orders in all available categories.

Answer:

sql
复制
SELECT c.name AS customer_name
FROM customers c
WHERE NOT EXISTS (
    SELECT cat.id
    FROM categories cat
    WHERE NOT EXISTS (
        SELECT 1
        FROM orders o
        WHERE o.customer_id = c.id AND o.category_id = cat.id
    )
);
4. Find Employees Who Have Never Been Managers (Self-Join + Subquery)
Tables:

employees: id, name, manager_id

Question: Write a query to find employees who have never been managers.

Answer:

sql
复制
SELECT e.name AS employee_name
FROM employees e
LEFT JOIN employees m ON e.id = m.manager_id
WHERE m.manager_id IS NULL;
5. Find the Top 3 Customers by Total Spending (Aggregation + Window Function)
Tables:

customers: id, name

orders: id, customer_id, amount

Question: Write a query to find the top 3 customers by total spending.

Answer:

sql
复制
WITH customer_spending AS (
    SELECT c.name AS customer_name, SUM(o.amount) AS total_spent
    FROM customers c
    INNER JOIN orders o ON c.id = o.customer_id
    GROUP BY c.name
)
SELECT customer_name, total_spent
FROM customer_spending
ORDER BY total_spent DESC
LIMIT 3;
6. Find Products That Have Never Been Ordered (LEFT JOIN + NULL Check)
Tables:

products: id, name

orders: id, product_id

Question: Write a query to find products that have never been ordered.

Answer:

sql
复制
SELECT p.name AS product_name
FROM products p
LEFT JOIN orders o ON p.id = o.product_id
WHERE o.product_id IS NULL;
7. Find Employees Who Work in the Same Department as Their Manager (Self-Join + INNER JOIN)
Tables:

employees: id, name, department_id, manager_id

departments: id, name

Question: Write a query to find employees who work in the same department as their manager.

Answer:

sql
复制
SELECT e.name AS employee_name, d.name AS department_name
FROM employees e
INNER JOIN employees m ON e.manager_id = m.id
INNER JOIN departments d ON e.department_id = d.id
WHERE e.department_id = m.department_id;
8. Find Customers Who Have Placed Orders in Consecutive Months (Window Function + Self-Join)
Tables:

customers: id, name

orders: id, customer_id, order_date

Question: Write a query to find customers who have placed orders in at least two consecutive months.

Answer:

sql
复制
WITH customer_order_months AS (
    SELECT customer_id, DATE_FORMAT(order_date, '%Y-%m') AS order_month
    FROM orders
    GROUP BY customer_id, DATE_FORMAT(order_date, '%Y-%m')
)
SELECT DISTINCT c.name AS customer_name
FROM customers c
INNER JOIN customer_order_months com1 ON c.id = com1.customer_id
INNER JOIN customer_order_months com2 ON c.id = com2.customer_id
WHERE com2.order_month = DATE_ADD(com1.order_month, INTERVAL 1 MONTH);
9. Calculate the Difference Between Each Employee's Salary and the Department Average (Window Function)
Tables:

employees: id, name, salary, department_id

Question: Write a query to calculate the difference between each employee's salary and the average salary of their department.

Answer:

sql
复制
SELECT name, salary, department_id,
       salary - AVG(salary) OVER (PARTITION BY department_id) AS salary_difference_from_avg
FROM employees;
10. Find the Cumulative Sum of Sales by Quarter (Window Function)
Tables:

sales: id, sale_date, amount

Question: Write a query to calculate the cumulative sum of sales by quarter.

Answer:

sql
复制
SELECT sale_date, amount,
       SUM(amount) OVER (PARTITION BY YEAR(sale_date), QUARTER(sale_date) ORDER BY sale_date) AS cumulative_sum
FROM sales;
11. Find the Employees with the Top 2 Salaries in Each Department (Window Function)
Tables:

employees: id, name, salary, department_id

Question: Write a query to find the employees with the top 2 salaries in each department.

Answer:

sql
复制
WITH ranked_employees AS (
    SELECT name, salary, department_id,
           RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank
    FROM employees
)
SELECT name, salary, department_id
FROM ranked_employees
WHERE salary_rank <= 2;
12. Calculate the Median Salary for Each Department (Window Function + Subquery)
Tables:

employees: id, name, salary, department_id

Question: Write a query to calculate the median salary for each department.

Answer:

sql
复制
WITH ranked_salaries AS (
    SELECT salary, department_id,
           ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary) AS row_num,
           COUNT(*) OVER (PARTITION BY department_id) AS total_count
    FROM employees
)
SELECT department_id, AVG(salary) AS median_salary
FROM ranked_salaries
WHERE row_num IN (FLOOR((total_count + 1) / 2), CEIL((total_count + 1) / 2))
GROUP BY department_id;

Financial SQL Questions for Hedge Funds
1. Calculate the Daily Profit and Loss (PnL) for Each Portfolio
Tables:

trades: trade_id, portfolio_id, trade_date, quantity, price

portfolios: portfolio_id, portfolio_name

Question: Write a query to calculate the daily PnL for each portfolio. Assume PnL is calculated as the sum of (quantity * price) for all trades on a given day.

Answer:

sql
复制
SELECT p.portfolio_name, t.trade_date,
       SUM(t.quantity * t.price) AS daily_pnl
FROM trades t
INNER JOIN portfolios p ON t.portfolio_id = p.portfolio_id
GROUP BY p.portfolio_name, t.trade_date
ORDER BY t.trade_date;
2. Calculate the Cumulative PnL for Each Portfolio Over Time
Tables:

trades: trade_id, portfolio_id, trade_date, quantity, price

portfolios: portfolio_id, portfolio_name

Question: Write a query to calculate the cumulative PnL for each portfolio over time.

Answer:

sql
复制
SELECT p.portfolio_name, t.trade_date,
       SUM(t.quantity * t.price) OVER (PARTITION BY p.portfolio_name ORDER BY t.trade_date) AS cumulative_pnl
FROM trades t
INNER JOIN portfolios p ON t.portfolio_id = p.portfolio_id
ORDER BY p.portfolio_name, t.trade_date;
3. Find the Top 3 Performing Portfolios by Total PnL
Tables:

trades: trade_id, portfolio_id, quantity, price

portfolios: portfolio_id, portfolio_name

Question: Write a query to find the top 3 performing portfolios by total PnL.

Answer:

sql
复制
WITH portfolio_pnl AS (
    SELECT p.portfolio_name, SUM(t.quantity * t.price) AS total_pnl
    FROM trades t
    INNER JOIN portfolios p ON t.portfolio_id = p.portfolio_id
    GROUP BY p.portfolio_name
)
SELECT portfolio_name, total_pnl
FROM portfolio_pnl
ORDER BY total_pnl DESC
LIMIT 3;
4. Calculate the Moving Average of Trade Prices for Each Stock
Tables:

trades: trade_id, stock_id, trade_date, price

stocks: stock_id, stock_name

Question: Write a query to calculate the 7-day moving average of trade prices for each stock.

Answer:

sql
复制
SELECT s.stock_name, t.trade_date, t.price,
       AVG(t.price) OVER (PARTITION BY s.stock_name ORDER BY t.trade_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS moving_avg_price
FROM trades t
INNER JOIN stocks s ON t.stock_id = s.stock_id
ORDER BY s.stock_name, t.trade_date;
5. Find Stocks with the Highest Daily Trading Volume
Tables:

trades: trade_id, stock_id, trade_date, quantity

stocks: stock_id, stock_name

Question: Write a query to find the stocks with the highest daily trading volume.

Answer:

sql
复制
WITH daily_volume AS (
    SELECT s.stock_name, t.trade_date, SUM(t.quantity) AS total_volume
    FROM trades t
    INNER JOIN stocks s ON t.stock_id = s.stock_id
    GROUP BY s.stock_name, t.trade_date
)
SELECT stock_name, trade_date, total_volume
FROM daily_volume
ORDER BY total_volume DESC
LIMIT 10;
6. Calculate the Sharpe Ratio for Each Portfolio
Tables:

trades: trade_id, portfolio_id, trade_date, quantity, price

portfolios: portfolio_id, portfolio_name

Question: Write a query to calculate the Sharpe Ratio for each portfolio. Assume the risk-free rate is 0.01 and Sharpe Ratio = (Average Daily Return - Risk-Free Rate) / Standard Deviation of Daily Returns.

Answer:

sql
复制
WITH daily_returns AS (
    SELECT p.portfolio_name, t.trade_date,
           (SUM(t.quantity * t.price) - LAG(SUM(t.quantity * t.price), 1) OVER (PARTITION BY p.portfolio_name ORDER BY t.trade_date)) / LAG(SUM(t.quantity * t.price), 1) OVER (PARTITION BY p.portfolio_name ORDER BY t.trade_date)) AS daily_return
    FROM trades t
    INNER JOIN portfolios p ON t.portfolio_id = p.portfolio_id
    GROUP BY p.portfolio_name, t.trade_date
),
sharpe_ratio AS (
    SELECT portfolio_name,
           (AVG(daily_return) - 0.01) / STDDEV(daily_return)) AS sharpe_ratio
    FROM daily_returns
    GROUP BY portfolio_name
)
SELECT portfolio_name, sharpe_ratio
FROM sharpe_ratio;
7. Find the Maximum Drawdown for Each Portfolio
Tables:

trades: trade_id, portfolio_id, trade_date, quantity, price

portfolios: portfolio_id, portfolio_name

Question: Write a query to calculate the maximum drawdown for each portfolio. Drawdown is the peak-to-trough decline during a specific period.

Answer:

sql
复制
WITH portfolio_values AS (
    SELECT p.portfolio_name, t.trade_date,
           SUM(t.quantity * t.price) AS portfolio_value
    FROM trades t
    INNER JOIN portfolios p ON t.portfolio_id = p.portfolio_id
    GROUP BY p.portfolio_name, t.trade_date
),
drawdowns AS (
    SELECT portfolio_name, trade_date, portfolio_value,
           (portfolio_value - MAX(portfolio_value) OVER (PARTITION BY portfolio_name ORDER BY trade_date)) / MAX(portfolio_value) OVER (PARTITION BY portfolio_name ORDER BY trade_date)) AS drawdown
    FROM portfolio_values
)
SELECT portfolio_name, MIN(drawdown) AS max_drawdown
FROM drawdowns
GROUP BY portfolio_name;
8. Calculate the Correlation Between Two Stocks' Daily Returns
Tables:

trades: trade_id, stock_id, trade_date, quantity, price

stocks: stock_id, stock_name

Question: Write a query to calculate the correlation between the daily returns of two stocks (e.g., Stock A and Stock B).

Answer:

sql
复制
WITH stock_returns AS (
    SELECT stock_id, trade_date,
           (SUM(quantity * price) - LAG(SUM(quantity * price), 1) OVER (PARTITION BY stock_id ORDER BY trade_date)) / LAG(SUM(quantity * price), 1) OVER (PARTITION BY stock_id ORDER BY trade_date)) AS daily_return
    FROM trades
    GROUP BY stock_id, trade_date
)
SELECT CORR(a.daily_return, b.daily_return) AS correlation
FROM stock_returns a
INNER JOIN stock_returns b ON a.trade_date = b.trade_date
WHERE a.stock_id = 'Stock_A' AND b.stock_id = 'Stock_B';
9. Calculate the Value-at-Risk (VaR) for a Portfolio
Tables:

trades: trade_id, portfolio_id, trade_date, quantity, price

portfolios: portfolio_id, portfolio_name

Question: Write a query to calculate the 95% Value-at-Risk (VaR) for a portfolio. Assume VaR is the 5th percentile of daily returns.

Answer:

sql
复制
WITH daily_returns AS (
    SELECT p.portfolio_name, t.trade_date,
           (SUM(t.quantity * t.price) - LAG(SUM(t.quantity * t.price), 1) OVER (PARTITION BY p.portfolio_name ORDER BY t.trade_date)) / LAG(SUM(t.quantity * t.price), 1) OVER (PARTITION BY p.portfolio_name ORDER BY t.trade_date)) AS daily_return
    FROM trades t
    INNER JOIN portfolios p ON t.portfolio_id = p.portfolio_id
    GROUP BY p.portfolio_name, t.trade_date
)
SELECT portfolio_name, PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY daily_return) AS var_95
FROM daily_returns
GROUP BY portfolio_name;



